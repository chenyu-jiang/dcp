from typing import Iterator, overload, List

__version__: str

class ConnectivitySet:
    def __init__(self, *args, **kwargs) -> None: ...
    def contains(self, block: int) -> bool: ...
    def __iter__(self) -> Iterator: ...

class Context:
    def __init__(self) -> None: ...
    def loadINIconfiguration(self, path_to_file: str) -> None: ...
    def setCustomTargetBlockWeights(
        self, customtargetblockweights: list[int]
    ) -> None: ...
    def setEpsilon(self, imbalanceparameterepsilon: float) -> None: ...
    def setK(self, k: int) -> None: ...
    def setPartitionFileName(self, file_name: str) -> None: ...
    def setSeed(self, seed: int) -> None: ...
    def suppressOutput(self, bool: bool) -> None: ...
    def writePartitionFile(self, bool: bool) -> None: ...

class Hypergraph:
    @overload
    def __init__(
        self,
        num_nodes: int,
        num_edges: int,
        index_vector: list[int],
        edge_vector: list[int],
        k: int,
    ) -> None: ...
    @overload
    def __init__(
        self,
        num_nodes: int,
        num_edges: int,
        index_vector: list[int],
        edge_vector: list[int],
        k: int,
        edge_weights: list[int],
        node_weights: list[int],
    ) -> None: ...
    def blockID(self, node: int) -> int: ...
    def blockSize(self, block: int) -> int: ...
    def blockWeight(self, block: int) -> int: ...
    def communities(self) -> list[int]: ...
    def connectivity(self, hyperedge: int) -> int: ...
    def connectivitySet(self, *args, **kwargs): ...
    def containsFixedNodex(self) -> bool: ...
    def edgeSize(self, hyperedge: int) -> int: ...
    def edgeWeight(self, hyperedge: int) -> int: ...
    def edges(self) -> Iterator: ...
    def fixNodeToBlock(self, node: int, block: int) -> None: ...
    def incidentEdges(self, node: int) -> Iterator: ...
    def isFixedNode(self, node: int) -> bool: ...
    def nodeDegree(self, node: int) -> int: ...
    def nodeWeight(self, node: int) -> int: ...
    def nodes(self) -> Iterator: ...
    def numBlocks(self) -> int: ...
    def numEdges(self) -> int: ...
    def numFixedNodes(self) -> int: ...
    def numNodes(self) -> int: ...
    def numPins(self) -> int: ...
    def numPinsInBlock(self, hyperedge: int, block: int) -> int: ...
    def pins(self, hyperedge: int) -> Iterator: ...
    def printGraphState(self) -> None: ...
    def reset(self) -> None: ...

def connectivityMinusOne(hypergraph: Hypergraph) -> int: ...
def createHypergraphFromFile(filename: str, k: int) -> Hypergraph: ...
def cut(hypergraph: Hypergraph) -> int: ...
def imbalance(hypergraph: Hypergraph, context) -> float: ...
def partition(hypergraph: Hypergraph, context) -> None: ...
def improve(
    hypergraph: Hypergraph,
    input_partition: List[int],
    num_vcycles: int,
    context,
) -> None: ...
def soed(hypergraph: Hypergraph) -> int: ...
